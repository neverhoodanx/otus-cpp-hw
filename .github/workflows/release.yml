name: 'C++ CI'

on:
  push:
    branches:
      - main
      - feature/**
      - release/**
    pull_request:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - run: sudo apt-get update && sudo apt-get install libboost-test-dev libboost-filesystem-dev libboost-program-options-dev -y
      - run: cmake . -DPATCH_VERSION=${{ github.run_number }} -DWITH_BOOST_TEST=ON
      - run: cmake --build .
      - run: cmake --build . --target test
      - run: cmake --build . --target package

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ contains(github.ref, 'release') }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - run: sudo apt-get update && sudo apt-get install libboost-test-dev libboost-filesystem-dev libboost-program-options-dev -y
      - run: cmake . -DPATCH_VERSION=${{ github.run_number }} -DWITH_BOOST_TEST=ON -DWITH_G_TEST=ON
      - run: cmake --build .
      - run: cmake --build . --target test
      - run: cmake --build . --target package
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./async-0.9.${{ github.run_number }}-Linux.deb
          asset_name: async-0.9.${{ github.run_number }}-Linux.deb
          asset_content_type: application/vnd.debian.binary-package
  docs:
    needs: deploy
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    if: ${{ contains(github.ref, 'release') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v4

      # Install Doxygen
      - name: Install Doxygen
        run: sudo apt install doxygen && doxygen --version

      - name: Install Graphviz
        run: sudo apt install graphviz
        
      # Create documentation   
      - name: Create documentation     
        run: doxygen ./Doxyfile
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: './html/'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4